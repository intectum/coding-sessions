glfwInit: #extern proc() -> cint
glfwCreateWindow: #extern proc(width: cint, height: cint, title: cstring, monitor: ^i8, share: ^i8) -> ^i8
glfwMakeContextCurrent: #extern proc(window: ^i8)
glfwWindowShouldClose: #extern proc(window: ^i8) -> cint
glfwPollEvents: #extern proc()
glfwSwapBuffers: #extern proc(window: ^i8)
glfwSwapInterval: #extern proc(interval: cint)

GL_ARRAY_BUFFER: i32 = 34962
GL_COLOR_BUFFER_BIT: i32 = 16384
GL_FLOAT: i32 = 5126
GL_FRAGMENT_SHADER: i32 = 35632
GL_TRIANGLES: i32 = 4
GL_VERTEX_SHADER: i32 = 35633

glAttachShader: #extern proc(program: i32, shader: i32)
glBindBuffer: #extern proc(target: i32, buffer: i32)
glClear: #extern proc(mask: i32)
glCompileShader: #extern proc(shader: i32)
glCreateProgram: #extern proc() -> i32
glCreateShader: #extern proc(shader_type: i32) -> i32
glDrawArrays: #extern proc(mode: i32, first: i32, count: i32)
glEnableVertexAttribArray: #extern proc(index: i32)
glGenBuffers: #extern proc(n: i32, buffers: ^i32)
glGetError: #extern proc() -> i32
glGetProgramiv: #extern proc(program: i32, pname: i32, params: ^i32)
glGetProgramInfoLog: #extern proc(program: i32, max_length: i32, length: ^i32, info_log: #boundless ^i8)
glGetShaderInfoLog: #extern proc(shader: i32, max_length: i32, length: ^i32, info_log: #boundless ^i8)
glGetShaderiv: #extern proc(shader: i32, pname: i32, params: ^i32)
glLinkProgram: #extern proc(program: i32)
glMapNamedBufferRange: #extern proc(buffer: i32, offset: i64, length: i64, access: i32) -> #boundless ^i8
glNamedBufferStorage: #extern proc(buffer: i32, size: i64, data: ^i8, flags: i32)
glShaderSource: #extern proc(shader: i32, count: i32, src: ^cstring, length: ^i32)
glUseProgram: #extern proc(program: i32)
glVertexAttribPointer: #extern proc(index: i32, size: i32, type: i32, normalized: bool, stride: i32, pointer: ^i8)

gluErrorString: #extern proc(error: i32) -> #boundless ^i8

glfwInit()
window = glfwCreateWindow(1920, 1080, c"Bangalang", nil, nil)
glfwMakeContextCurrent(window)
glfwSwapInterval(0)

vertex_shader_src = c"#version 460 core\nin vec3 position; void main() { gl_Position = vec4(position, 1.0); }"
vertex_shader_src_len: i32 = 86
vertex_shader_name = compile_shader(GL_VERTEX_SHADER, vertex_shader_src, vertex_shader_src_len)

fragment_shader_src = c"#version 460 core\nout vec4 color; void main() { color = vec4(1.0); }"
fragment_shader_src_len: i32 = 86
fragment_shader_name = compile_shader(GL_FRAGMENT_SHADER, fragment_shader_src, fragment_shader_src_len)

program_name = link_shaders(vertex_shader_name, fragment_shader_name)

triangle_count: i64 = 65536
vertex_count = triangle_count * 3

buffer_name: i32
buffer_size: i64 = vertex_count * 3 * 4
buffer_access_hints: i32 = 194
glGenBuffers(1, ^buffer_name) check_opengl_error()
glBindBuffer(GL_ARRAY_BUFFER, buffer_name) check_opengl_error()
glNamedBufferStorage(buffer_name, buffer_size, nil, buffer_access_hints) check_opengl_error()
buffer_data_raw = glMapNamedBufferRange(buffer_name, 0, buffer_size, buffer_access_hints) check_opengl_error()

buffer_data_i64: i64[2]
buffer_data_i64[0] = #untyped buffer_data_raw
buffer_data_i64[1] = vertex_count
buffer_data: vec3[] = #untyped buffer_data_i64

glUseProgram(program_name) check_opengl_error()

glEnableVertexAttribArray(0) check_opengl_error()
glVertexAttribPointer(0, 3, GL_FLOAT, false, 0, nil) check_opengl_error()

fps_timeval: i64[2]
gettimeofday(^fps_timeval)
fps_time = fps_timeval[0] * 1000000 + fps_timeval[1]
frame_count: i64

task_func: proc(data: vec3[], start: i64) =
{
    triangle_count_1d: i64 = 256
    triangle_size = 2 / f32(triangle_count_1d)

    for (index: i64, index < data.length, index = index + 1)
    {
        triangle_index = (start + index) / 3
        vertex_index = (start + index) % 3

        column_count = triangle_index / triangle_count_1d
        row_count = triangle_index % triangle_count_1d

        x = -1 + triangle_size * f32(column_count)
        y = -1 + triangle_size * f32(row_count)

        if (vertex_index == 0)
        {
            data[index][0] = x + triangle_size * 0.5
            data[index][1] = y + triangle_size
            data[index][2] = 0
        }
        else if (vertex_index == 1)
        {
            data[index][0] = x
            data[index][1] = y
            data[index][2] = 0
        }
        else if (vertex_index == 2)
        {
            data[index][0] = x + triangle_size
            data[index][1] = y
            data[index][2] = 0
        }
    }
}

pool: thread_pool
pool.worker_count = 8
thread_pool_start(^pool)

for (glfwWindowShouldClose(window) == 0)
{
    glfwPollEvents()
    glfwSwapBuffers(window)

    //task_func(buffer_data, 0)

    boomstick(^pool, task_func, buffer_data)
    thread_pool_wait(^pool)

    glClear(GL_COLOR_BUFFER_BIT) check_opengl_error()
    glDrawArrays(GL_TRIANGLES, 0, i32(vertex_count)) check_opengl_error()

    timeval: i64[2]
    gettimeofday(^timeval)
    time = timeval[0] * 1000000 + timeval[1]
    if (time > fps_time + 1000000)
    {
        string_bytes: i8[100]
        string_len = itoa(frame_count, ^string_bytes)
        print("FPS: ")
        printbln(^string_bytes, string_len)

        frame_count = 0
        fps_time = time
    }

    frame_count = frame_count + 1
}

compile_shader: proc(type: i32, src: cstring, src_len: i32) -> i32 =
{
    name = glCreateShader(type) check_opengl_error()
    glShaderSource(name, 1, ^src, ^src_len) check_opengl_error()
    glCompileShader(name) check_opengl_error()

    GL_COMPILE_STATUS: i32 = 35713
    compile_status: i32
    glGetShaderiv(name, GL_COMPILE_STATUS, ^compile_status) check_opengl_error()

    info_log: i8[1000000]
    glGetShaderInfoLog(name, 1000000, nil, ^info_log) check_opengl_error()

    if (info_log[0] != 0) printb(^info_log, 1000000)
    assert(compile_status != 0, "failed to compile shader")

    return name
}

link_shaders: proc(vertex_shader_name: i32, fragment_shader_name: i32) -> i32 =
{
    name = glCreateProgram() check_opengl_error()
    glAttachShader(name, vertex_shader_name) check_opengl_error()
    glAttachShader(name, fragment_shader_name) check_opengl_error()
    glLinkProgram(name) check_opengl_error()

    GL_LINK_STATUS: i32 = 35714
    link_status: i32
    glGetProgramiv(name, GL_LINK_STATUS, ^link_status) check_opengl_error()

    info_log: i8[1000000]
    glGetProgramInfoLog(name, 1000000, nil, ^info_log) check_opengl_error()

    if (info_log[0] != 0) printb(^info_log, 1000000)
    assert(link_status != 0, "failed to link shaders")

    return name
}

check_opengl_error: proc() =
{
    error = glGetError()
    GL_NO_ERROR: i32 = 0
    if (error != GL_NO_ERROR)
    {
        printb(gluErrorString(error), 100)
    }
}
