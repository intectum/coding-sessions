write: proc(file_descriptor: i64, message: string) =
    syscall(1, file_descriptor, #untyped message.raw, message.length, 0, 0, 0)

print: proc(message: string) = write(1, message)
println: proc(message: string) =
{
    write(1, message)
    write(1, "\n")
}

mmap: proc(address: ^i8, length: i64, prot: i64, flags: i64, file_descriptor: i64, offset: i64) -> ^i8 =
{
    address_i64 = syscall(9, #untyped address, length, prot, flags, file_descriptor, offset)
    return #untyped address_i64
}

exit: proc(exit_code: i64) = syscall(60, exit_code, 0, 0, 0, 0, 0)

gettimeofday: proc(timeval: ^i64[2]) = syscall(96, #untyped timeval, 0, 0, 0, 0, 0)

futex: proc(futex_word: ^i32, operation: i64, operation_arg0: i64, operation_arg1: i64) =
    syscall(202, #untyped futex_word, operation, operation_arg0, operation_arg1, 0, 0)

mutex_lock: proc(mutex: ^i32) =
    for cmpxchg(mutex, 0, 1) == false
        futex(mutex, 0 /* FUTEX_WAIT */, 1 /* expected */, 0 /* timeout */)

mutex_unlock: proc(mutex: ^i32) =
    if cmpxchg(mutex, 1, 0)
        futex(mutex, 1 /* FUTEX_WAKE */, 1 /* count */, 0)

semaphore_wait: proc(semaphore: ^atomic_i32) -> bool =
    for true // spin
    {
        semaphore^ -= 1
        if semaphore^ >= 0
            return true
        else
            semaphore^ += 1
    }

semaphore_signal: proc(semaphore: ^atomic_i32) = { semaphore^ += 1 }

start_thread: proc(func: proc(arg: i64), arg: i64) -> i64 =
{
    mmap_prot: i64 = 0x3 // PROT_READ | PROT_WRITE
    mmap_flags: i64 = 0x22 // MAP_PRIVATE | MAP_ANONYMOUS
    stack = mmap(nil, 4096, mmap_prot, mmap_flags, -1, 0)

    stack_i64: i64 = #untyped stack
    stack_i64 += 4096
    stack_i64 -= 2 * 8 // account for params
    stack_params: ^i64[2] = #untyped stack_i64
    stack_params[1] = #untyped func
    stack_params[0] = arg
    stack_i64 -= 8 // account for instruction pointer
    stack_i64 -= 7 * 8 // account for local vars declared before clone

    clone_flags: i64 = 0x10d00 // CLONE_VM | CLONE_FILES | CLONE_SIGHAND | CLONE_THREAD
    pid = syscall(56, clone_flags, stack_i64, 0, 0, 0, 0)

    if pid == 0
    {
        func(arg)
        exit(0)
    }

    return pid
}

// TODO move out of here
vec3 = f32[3]

thread_pool_task = struct
{
    func: proc(data: vec3[], start: i64),
    data: vec3[],
    start: i64
}

thread_pool = struct
{
    worker_count: i64,
    current_worker_count: i64,
    tasks: thread_pool_task[100],
    task_count: i64,
    mutex: i32,
    semaphore: atomic_i32
}

thread_pool_worker: proc(arg: i64) =
{
    pool: ^thread_pool = #untyped arg

    alive = true
    for alive
    {
        semaphore_wait(^pool.semaphore)
        mutex_lock(^pool.mutex)

        if pool.task_count == 0
        {
            alive = false
            mutex_unlock(^pool.mutex)
        }
        else
        {
            pool.current_worker_count += 1
            pool.task_count -= 1
            task = pool.tasks[pool.task_count]
            mutex_unlock(^pool.mutex)

            task.func(task.data, task.start)

            mutex_lock(^pool.mutex)
            pool.current_worker_count -= 1
            mutex_unlock(^pool.mutex)
        }
    }
}

thread_pool_start: proc(pool: ^thread_pool) =
    for index: i64, index < pool.worker_count, index += 1
        start_thread(thread_pool_worker, #untyped pool)

thread_pool_enqueue: proc(pool: ^thread_pool, task: ^thread_pool_task) =
{
    mutex_lock(^pool.mutex)
    pool.tasks[pool.task_count] = task^
    pool.task_count += 1
    mutex_unlock(^pool.mutex)

    semaphore_signal(^pool.semaphore)
}

thread_pool_wait: proc(pool: ^thread_pool) -> bool =
    for true // spin
        if pool.task_count == 0 && pool.current_worker_count == 0
            return true

thread_pool_stop: proc(pool: ^thread_pool) =
    for index: i64, index < pool.worker_count, index += 1
        semaphore_signal(^pool.semaphore)

boomstick: proc(pool: ^thread_pool, kernel: proc(data: vec3[], start: i64), data: vec3[]) =
{
    worker_data_length = data.length / pool.worker_count

    for index: i64, index < pool.worker_count, index += 1
    {
        start = index * worker_data_length
        end = start + worker_data_length

        task: thread_pool_task =
        {
            func = kernel,
            data = data[start:end],
            start = start
        }

        thread_pool_enqueue(pool, ^task)
    }
}

assert: proc(assertion: bool, message: string) =
{
    if assertion == false
    {
        print("Assertion failed: ")
        println(message)
        exit(1)
    }
}

itoa: proc(value: i64, buffer: i8[]) -> string =
{
    length: i64 = 0
    reversed_buffer: i8[100]

    if value < 0
    {
        reversed_buffer[length] = 45 // '-'

        value = -value
        length += 1
    }
    else if value == 0
    {
        reversed_buffer[length] = 48 // '0'

        length += 1
    }

    for value > 0
    {
        reversed_buffer[length] = i8(value % 10) + 48 // '0'

        value /= 10
        length += 1
    }

    for index: i64, index < length, index += 1
        buffer[index] = reversed_buffer[length - 1 - index]

    return buffer[:length]
}
