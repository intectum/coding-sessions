// Single-line comment

/*
  Multi-line comment

  /*
    Nested multi-line comment!
  */

  // Multi-line close */

  "Multi-line close */"
*/

b0: bool = true
assert(b0 == true, "TEST: Declaration from bool")
b1 = b0
assert(b1 == true, "TEST: Declaration from bool var")
i0: i8 = 1
assert(i0 == 1, "TEST: Declaration from number")
i1 = i0
assert(i1 == 1, "TEST: Declaration from number var")
a0: i8[10]
a0[2] = 42
assert(a0[2] == 42, "TEST: Declaration of array")
a1: i8[10] = a0
assert(a1[2] == 42, "TEST: Declaration from array")
p0: ^i8 = ^i0
assert(p0^ == 1, "TEST: Declaration of pointer")
pa0: ^i8[10] = ^a0
assert(pa0[2] == 42, "TEST: Declaration of pointer to array")

b1 = false
assert(b1 == false, "TEST: Assignment from bool")
b1 = b0
assert(b1 == true, "TEST: Assignment from bool var")
i1 = 2
assert(i1 == 2, "TEST: Assignment from number")
i1 = i0
assert(i1 == 1, "TEST: Assignment from number var")
a1[2] = 43
a1 = a0
assert(a1[2] == 42, "TEST: Assignment from array")
p1: ^i8
p1 = p0
assert(p1^ == 1, "TEST: Assignment of pointer")
pa1: ^i8[10]
pa1 = ^a0
assert(pa1[2] == 42, "TEST: Assignment of pointer to array")

assert(true == true, "TEST: Equal *boolean*")
assert(true != false, "TEST: Not equal *boolean*")
assert(1 == 1, "TEST: Equal *number")
assert(1 != 2, "TEST: Not equal *number*")
assert(1 < 2, "TEST: Less than *less*")
assert(1 < 1 == false, "TEST: Less than *equal*")
assert(2 < 1 == false, "TEST: Less than *greater*")
assert(1 > 2 == false, "TEST: Greater than *less*")
assert(1 > 1 == false, "TEST: Greater than *equal*")
assert(2 > 1, "TEST: Greater than *greater*")
assert(1 <= 2, "TEST: Less than or equal *less*")
assert(1 <= 1, "TEST: Less than or equal *equal*")
assert(2 <= 1 == false, "TEST: Less than or equal *greater*")
assert(1 >= 2 == false, "TEST: Greater than or equal *less*")
assert(1 >= 1, "TEST: Greater than or equal *equal*")
assert(2 >= 1, "TEST: Greater than or equal *greater*")

assert(4 + -2 == 2, "TEST: Negate")
assert(4 + 2 == 6, "TEST: Add")
assert(4 - 2 == 2, "TEST: Subtract")
assert(4 * 2 == 8, "TEST: Multiply")
assert(4 / 2 == 2, "TEST: Divide")
assert(6 + 4 * 2 == 14, "TEST: Add/multiply")
assert(6 - 4 / 2 == 4, "TEST: Subtract/divide")
assert((6 + 4) * 2 == 20, "TEST: Add/multiply *brackets*")
assert((6 - 4) / 2 == 1, "TEST: Subtract/divide *brackets*")

if_i_true: i8 = 0
if (true)
{
    if_i_true = 1
}
assert(if_i_true == 1, "TEST: If *true*")

if_i_true_single: i8 = 0
if (true) if_i_true_single = 1
assert(if_i_true_single == 1, "TEST: If *true single statement*")

if_i_false: i8 = 0
if (false)
{
    if_i_false = 1
}
assert(if_i_false == 0, "TEST: If *false*")

if_i_false_single: i8 = 0
if (false) if_i_false_single = 1
assert(if_i_false_single == 0, "TEST: If *false single statement*")

if_else_i_true: i8 = 0
if (true)
{
    if_else_i_true = 1
}
else
{
    if_else_i_true = 2
}
assert(if_else_i_true == 1, "TEST: If else *true*")

if_else_i_false: i8 = 0
if (false)
{
    if_else_i_false = 1
}
else
{
    if_else_i_false = 2
}
assert(if_else_i_false == 2, "TEST: If else *false*")

if_else_if_else_i_true_true: i8 = 0
if (true)
{
    if_else_if_else_i_true_true = 1
}
else if (true)
{
    if_else_if_else_i_true_true = 2
}
else
{
    if_else_if_else_i_true_true = 3
}
assert(if_else_if_else_i_true_true == 1, "TEST: If, else if, else *true/true*")

if_else_if_else_i_false_true: i8 = 0
if (false)
{
    if_else_if_else_i_false_true = 1
}
else if (true)
{
    if_else_if_else_i_false_true = 2
}
else
{
    if_else_if_else_i_false_true = 3
}
assert(if_else_if_else_i_false_true == 2, "TEST: If, else if, else *false/true*")

if_else_if_else_i_false_false: i8 = 0
if (false)
{
    if_else_if_else_i_false_false = 1
}
else if (false)
{
    if_else_if_else_i_false_false = 2
}
else
{
    if_else_if_else_i_false_false = 3
}
assert(if_else_if_else_i_false_false == 3, "TEST: If, else if, else *false/false*")

if_else_if_else_i_false_false_single: i8 = 0
if (false) if_else_if_else_i_false_false_single = 1
else if (false) if_else_if_else_i_false_false_single = 2
else if_else_if_else_i_false_false_single = 3
assert(if_else_if_else_i_false_false_single == 3, "TEST: If, else if, else *false/false single statement*")

for_e_sum: i64 = 0
for_e_value: i64 = 10
for (for_e_value > 0)
{
    for_e_sum = for_e_sum + for_e_value
    for_e_value = for_e_value - 1
}
assert(for_e_sum == 55, "TEST: For *expression*")

for_de_sum: i64 = 0
for (for_value: i64 = 10, for_value > 0)
{
    for_de_sum = for_de_sum + for_value
    for_value = for_value - 1
}
assert(for_de_sum == 55, "TEST: For *declaration/expression*")

for_ea_sum: i64 = 0
for_ea_value: i64 = 10
for (for_ea_value > 0, for_ea_value = for_ea_value - 1)
{
    for_ea_sum = for_ea_sum + for_ea_value
}
assert(for_ea_sum == 55, "TEST: For *expression/assignment*")

for_dea_sum: i64 = 0
for (for_value: i64 = 10, for_value > 0, for_value = for_value - 1)
{
    for_dea_sum = for_dea_sum + for_value
}
assert(for_dea_sum == 55, "TEST: For *declaration/expression/assignment*")

for_dea_sum_single: i64 = 0
for (for_value: i64 = 10, for_value > 0, for_value = for_value - 1)
    for_dea_sum_single = for_dea_sum_single + for_value
assert(for_dea_sum_single == 55, "TEST: For *declaration/expression/assignment single statement*")

// This should be valid (not a duplicate identifier)
for_value: i64 = 1

proc_1: proc() -> i8 =
{
    return 1
}
assert(proc_1() == 1, "TEST: Proc return")

proc_1_single: proc() -> i8 = return 1
assert(proc_1_single() == 1, "TEST: Proc return single statement")
