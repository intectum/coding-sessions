// Single-line comment

/*
  Multi-line comment

  /*
    Nested multi-line comment!
  */

  // Multi-line close */

  "Multi-line close */"
*/

b0: bool = true
assert(b0 == true, "TEST: Declaration from bool")
b1 := b0
assert(b1 == true, "TEST: Declaration from bool var")
i0: i8 = 1
assert(i0 == 1, "TEST: Declaration from number")
i1 := i0
assert(i1 == 1, "TEST: Declaration from number var")
a0: i8[10]
a0[2] = 42
assert(a0[2] == 42, "TEST: Declaration of array")
a1: i8[10] = a0
assert(a1[2] == 42, "TEST: Declaration from array")
p0: ^i8 = ^i0
assert(p0^ == 1, "TEST: Declaration of pointer")
pa0: ^i8[10] = ^a0
assert(pa0[2] == 42, "TEST: Declaration of pointer to array")

b1 = false
assert(b1 == false, "TEST: Assignment from bool")
b1 = b0
assert(b1 == true, "TEST: Assignment from bool var")
i1 = 2
assert(i1 == 2, "TEST: Assignment from number")
i1 = i0
assert(i1 == 1, "TEST: Assignment from number var")
a1[2] = 43
a1 = a0
assert(a1[2] == 42, "TEST: Assignment from array")
p1: ^i8
p1 = p0
assert(p1^ == 1, "TEST: Assignment of pointer")
pa1: ^i8[10]
pa1 = ^a0
assert(pa1[2] == 42, "TEST: Assignment of pointer to array")

assert(true == true, "TEST: Equal *boolean*")
assert(true != false, "TEST: Not equal *boolean*")
assert(1 == 1, "TEST: Equal *number")
assert(1 != 2, "TEST: Not equal *number*")
assert(1 < 2, "TEST: Less than *less*")
assert(1 < 1 == false, "TEST: Less than *equal*")
assert(2 < 1 == false, "TEST: Less than *greater*")
assert(1 > 2 == false, "TEST: Greater than *less*")
assert(1 > 1 == false, "TEST: Greater than *equal*")
assert(2 > 1, "TEST: Greater than *greater*")
assert(1 <= 2, "TEST: Less than or equal *less*")
assert(1 <= 1, "TEST: Less than or equal *equal*")
assert(2 <= 1 == false, "TEST: Less than or equal *greater*")
assert(1 >= 2 == false, "TEST: Greater than or equal *less*")
assert(1 >= 1, "TEST: Greater than or equal *equal*")
assert(2 >= 1, "TEST: Greater than or equal *greater*")

assert(4 + -2 == 2, "TEST: Negate")
assert(4 + 2 == 6, "TEST: Add")
assert(4 - 2 == 2, "TEST: Subtract")
assert(4 * 2 == 8, "TEST: Multiply")
assert(4 / 2 == 2, "TEST: Divide")
assert(6 + 4 * 2 == 14, "TEST: Add/multiply")
assert(6 - 4 / 2 == 4, "TEST: Subtract/divide")
assert((6 + 4) * 2 == 20, "TEST: Add/multiply *brackets*")
assert((6 - 4) / 2 == 1, "TEST: Subtract/divide *brackets*")

assert := proc(assertion: bool, message: string) -> bool
{
    if assertion == false
    {
        print("Assertion failed: ")
        print(message)
        exit(1)
    }

    return true
}
