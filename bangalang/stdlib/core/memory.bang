linux: = import("core/os/linux")

gl: = import("vendor/gl")

allocator: = proc(size: i64) -> ^byte

allocate_heap: allocator =
  linux.mmap(nil, size, linux.PROT_READ | linux.PROT_WRITE, linux.MAP_PRIVATE | linux.MAP_ANONYMOUS, -1, 0)

// TODO proper map?!
vram_allocator_count: i32@static
vram_allocator_addresses: (^byte)[100]@static
vram_allocator_names: i32[100]@static

allocate_vram: allocator =
{
  name: i32
  gl.glGenBuffers(1, ^name)
  gl.glBindBuffer(gl.GL_ARRAY_BUFFER, name)
  vram_allocator_names[vram_allocator_count] = name

  access_hints: i32 = 194
  gl.glNamedBufferStorage(name, size, nil, access_hints)
  address: = gl.glMapNamedBufferRange(name, 0, size, access_hints)
  vram_allocator_addresses[vram_allocator_count] = address

  vram_allocator_count += 1
  return address
}
